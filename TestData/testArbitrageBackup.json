{
    "pipe": {
        "comment": "Generate messages; duplicate into two streams; shuffle one; leak from the other",
        "small_test_message_producer" : {
			"name" : "MockMessageProducer",
			"message_count" : 10000
        },
        "fan_out" : {
            "name" : "multiple_sources",
            "destination" : {
                "shuffler": {
                    "name": "shuffler",
                    "look_ahead": 150
                },
                "multicast_sender" : {
                    "name" : "send_port_30001",
                    "port" : 30001,
                    "group" : "239.255.0.1"
                }
            },
            "destination": {
                "leaker": {
                },
                "multicast_sender" : {
                    "name" : "send_port_30002",
                    "port" : 30002,
                    "group" : "239.255.0.1"
                }
            }               
        }
    },
    
    "pipe": {
        "comment" : "Receive port 30001; push into Queue",
        "multicast_receiver" : {
            "name" : "MulticastReceiver_30001",
            "port" : 30001,
            "group" : "239.255.0.1", 
            "packet_size" : 1000            
        },
        "send_to_queue" : {
            "name" : "send_30001_to_queue",
            "queue" : "subscriber_queue"
        }
    },

    "pipe": {
        "comment" : "Receive port 30002; push into Queue",
        "multicast_receiver" : {
            "name" : "MulticastReceiver_30002",
            "port" : 30002,
            "group" : "239.255.0.1", 
            "packet_size" : 1000            
        },
        "send_to_queue" : {
            "name" : "send_30002_to_queue",
            "queue" : "subscriber_queue"
        }
    },

    "pipe": {
    "comment" : "Push heartbeats into Queue",
        "heartbeat" : {
            "name": "HeartbeatGenerator",
            "interval": 500
        },
        "send_to_queue" : {
            "name" : "send_30001_to_queue",
            "queue" : "subscriber_queue"
        }
    },
    
    "pipe":{
        "comment": "Process messages from queue; arbitrage; check the results (expecting gaps, but correct ordering.",
        "input_queue":{
            "name": "subscriber_queue",
            "entries" : 100
        },
        "comment": "ordered_merge goes here.",
        "small_test_message_consumer" : {
            "name": "MockMessageConsumer"
        }
    }
    "you_are_here":"why?"
}
